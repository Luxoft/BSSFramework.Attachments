//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Framework.Attachments.BLL
{
    
    
    public partial class AttachmentsBLLContext : Framework.DomainDriven.BLL.Security.SecurityBLLBaseContext<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid, Framework.Attachments.BLL.IAttachmentsBLLFactoryContainer>, Framework.DomainDriven.BLL.IBLLFactoryContainerContext<Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>>>, Framework.Attachments.BLL.IAttachmentsBLLContext
    {
        
        Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.IDefaultBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>> Framework.DomainDriven.BLL.IBLLFactoryContainerContext<Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.IDefaultBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>>>.Logics
        {
            get
            {
                return this.Logics;
            }
        }
        
        Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>> Framework.DomainDriven.BLL.IBLLFactoryContainerContext<Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>>>.Logics
        {
            get
            {
                return this.Logics;
            }
        }
    }
    
    public partial interface IAttachmentsBLLContext : Framework.DomainDriven.BLL.Security.IAccessDeniedExceptionServiceContainer, Framework.DomainDriven.BLL.Security.ISecurityServiceContainer<Framework.DomainDriven.BLL.Security.IRootSecurityService<Framework.Attachments.Domain.PersistentDomainObjectBase>>, Framework.DomainDriven.BLL.IBLLFactoryContainerContext<Framework.Attachments.BLL.IAttachmentsBLLFactoryContainer>, Framework.DomainDriven.IFetchServiceContainer<Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.DomainDriven.FetchBuildRule>
    {
        
        new Framework.Attachments.BLL.IAttachmentsBLLFactoryContainer Logics
        {
            get;
        }
    }
    
    public partial class SecurityDomainBLLBase<TDomainObject, TOperation> : Framework.DomainDriven.BLL.Security.DefaultSecurityDomainBLLBase<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, TDomainObject, System.Guid, TOperation>
        where TDomainObject : Framework.Attachments.Domain.PersistentDomainObjectBase
        where TOperation :  struct, System.Enum
    {
        
        public SecurityDomainBLLBase(Framework.Attachments.BLL.IAttachmentsBLLContext context, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, specificationEvaluator)
        {
        }
        
        public SecurityDomainBLLBase(Framework.Attachments.BLL.IAttachmentsBLLContext context, Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider, nuSpec.Abstraction.ISpecificationEvaluator specificationEvaluator = null) : 
                base(context, securityProvider, specificationEvaluator)
        {
        }
    }
    
    public partial class SecurityDomainBLLBase<TDomainObject> : Framework.Attachments.BLL.SecurityDomainBLLBase<TDomainObject, Framework.DomainDriven.BLL.BLLBaseOperation>
        where TDomainObject : Framework.Attachments.Domain.PersistentDomainObjectBase
    {
        
        public SecurityDomainBLLBase(Framework.Attachments.BLL.IAttachmentsBLLContext context) : 
                base(context)
        {
        }
        
        public SecurityDomainBLLBase(Framework.Attachments.BLL.IAttachmentsBLLContext context, Framework.SecuritySystem.ISecurityProvider<TDomainObject> securityProvider) : 
                base(context, securityProvider)
        {
        }
    }
    
    public partial interface IAttachmentsBLLFactoryContainer : Framework.DomainDriven.BLL.IBLLFactoryContainer<Framework.DomainDriven.BLL.Security.IDefaultSecurityBLLFactory<Framework.Attachments.Domain.PersistentDomainObjectBase, System.Guid>>
    {
        
        Framework.Attachments.BLL.IAttachmentBLL Attachment
        {
            get;
        }
        
        Framework.Attachments.BLL.IAttachmentContainerBLL AttachmentContainer
        {
            get;
        }
        
        Framework.Attachments.BLL.IAttachmentContainerBLLFactory AttachmentContainerFactory
        {
            get;
        }
        
        Framework.Attachments.BLL.IAttachmentBLLFactory AttachmentFactory
        {
            get;
        }
        
        Framework.Attachments.BLL.IDomainTypeBLL DomainType
        {
            get;
        }
        
        Framework.Attachments.BLL.IDomainTypeBLLFactory DomainTypeFactory
        {
            get;
        }
        
        Framework.Attachments.BLL.ITargetSystemBLL TargetSystem
        {
            get;
        }
        
        Framework.Attachments.BLL.ITargetSystemBLLFactory TargetSystemFactory
        {
            get;
        }
    }
    
    public partial interface IAttachmentBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.Attachment, System.Guid>
    {
    }
    
    public partial interface IAttachmentBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Attachments.BLL.IAttachmentBLL, Framework.Attachments.Domain.Attachment>
    {
    }
    
    public partial interface IAttachmentContainerBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.AttachmentContainer, System.Guid>
    {
    }
    
    public partial interface IAttachmentContainerBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Attachments.BLL.IAttachmentContainerBLL, Framework.Attachments.Domain.AttachmentContainer>
    {
    }
    
    public partial interface IDomainTypeBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.DomainType, System.Guid>
    {
    }
    
    public partial interface IDomainTypeBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Attachments.BLL.IDomainTypeBLL, Framework.Attachments.Domain.DomainType>
    {
    }
    
    public partial interface ITargetSystemBLL : Framework.DomainDriven.BLL.Security.IDefaultSecurityDomainBLLBase<Framework.Attachments.BLL.IAttachmentsBLLContext, Framework.Attachments.Domain.PersistentDomainObjectBase, Framework.Attachments.Domain.TargetSystem, System.Guid>
    {
    }
    
    public partial interface ITargetSystemBLLFactory : Framework.DomainDriven.BLL.Security.ISecurityBLLFactory<Framework.Attachments.BLL.ITargetSystemBLL, Framework.Attachments.Domain.TargetSystem>
    {
    }
}
